# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'h:\QT2VISTA\WindowDemo.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets 
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QSlider, QFileDialog,QCheckBox
import edge_tts
import asyncio
import os
from qasync import QEventLoop, QApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QLabel, QHBoxLayout
from PyQt5.QtWidgets import QColorDialog
from PyQt5.QtGui import QPalette
from PyQt5.QtWidgets import QAction, QMenu, QDialog
from PyQt5.QtGui import QLinearGradient, QColor, QBrush
import speech_recognition as sr
from pydub import AudioSegment
from pydub.silence import split_on_silence
from PyQt5.QtWidgets import QProgressBar
from tqdm import tqdm
import time

class TextToSpeechDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("文字转语音")
        self.resize(400, 300)
        layout = QVBoxLayout(self)
        label = QLabel("这是文字转语音的新窗口", self)
        layout.addWidget(label)

class Ui_MainWindow(object):
    def __init__(self):
        self.voices = []
        self.output_folder = ""
        self.voice_name_mapping = {
            "zh-CN-XiaoyiNeural": "小艺",
            "zh-CN-YunxiNeural": "云希",
            "zh-CN-YunjianNeural": "云健",
            "zh-CN-XiaoxiaoNeural": "晓晓",
            # 添加更多中文语音映射
            "en-US-JennyNeural": "Jenny",
            "en-US-GuyNeural": "Guy",
            # 添加更多英文语音映射
            "it-IT-ElsaNeural": "Elsa",
            "it-IT-IsabellaNeural": "Isabella",
            # 添加更多意大利语语音映射
        }
        self.voice_quality_options = ["低质量", "中等质量", "高质量"]
        self.color_options = ["默认", "浅色", "深色", "自定义", "蓝紫渐变", "日落渐变", "森林渐变", "海洋渐变"]
        self.subtitle_enabled = False
        self.audio_progress = None
        self.subtitle_progress = None

    async def init_voices(self):
        self.voices = await edge_tts.list_voices()
        self.updateVoices()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setMinimumSize(QtCore.QSize(800, 600))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setContentsMargins(20, 20, 20, 20)
        self.gridLayout.setSpacing(20)

        # 语言选择
        self.languageLabel = QtWidgets.QLabel(self.centralwidget)
        self.languageLabel.setText("语言:")
        self.gridLayout.addWidget(self.languageLabel, 0, 0)

        self.languageComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.languageComboBox.clear()
        self.languageComboBox.addItems(["英语", "简体中文", "意大利语"])
        self.gridLayout.addWidget(self.languageComboBox, 0, 1)

        # 语音选择
        self.voiceLabel = QtWidgets.QLabel(self.centralwidget)
        self.voiceLabel.setText("语音:")
        self.gridLayout.addWidget(self.voiceLabel, 1, 0)

        self.voiceComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.gridLayout.addWidget(self.voiceComboBox, 1, 1)

        # 感情选择
        self.emotionLabel = QtWidgets.QLabel(self.centralwidget)
        self.emotionLabel.setText("感情:")
        self.gridLayout.addWidget(self.emotionLabel, 2, 0)

        self.emotionComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.emotionComboBox.addItems(["正常", "高兴", "悲伤", "生气"])
        self.gridLayout.addWidget(self.emotionComboBox, 2, 1)

        # 语速调节
        self.speedLabel = QtWidgets.QLabel(self.centralwidget)
        self.speedLabel.setText("语速:")
        self.gridLayout.addWidget(self.speedLabel, 3, 0)

        speedLayout = QHBoxLayout()
        self.speedSlider = QSlider(QtCore.Qt.Horizontal, self.centralwidget)
        self.speedSlider.setRange(-100, 100)
        self.speedSlider.setValue(0)
        self.speedValueLabel = QLabel("1.0", self.centralwidget)
        speedLayout.addWidget(self.speedSlider)
        speedLayout.addWidget(self.speedValueLabel)
        self.gridLayout.addLayout(speedLayout, 3, 1)

        # 语调调节
        self.pitchLabel = QtWidgets.QLabel(self.centralwidget)
        self.pitchLabel.setText("语调:")
        self.gridLayout.addWidget(self.pitchLabel, 4, 0)

        pitchLayout = QHBoxLayout()
        self.pitchSlider = QSlider(QtCore.Qt.Horizontal, self.centralwidget)
        self.pitchSlider.setRange(-100, 100)
        self.pitchSlider.setValue(0)
        self.pitchValueLabel = QLabel("0", self.centralwidget)
        pitchLayout.addWidget(self.pitchSlider)
        pitchLayout.addWidget(self.pitchValueLabel)
        self.gridLayout.addLayout(pitchLayout, 4, 1)

        # 语音质量选择
        self.qualityLabel = QtWidgets.QLabel(self.centralwidget)
        self.qualityLabel.setText("语音质量:")
        self.gridLayout.addWidget(self.qualityLabel, 5, 0)

        self.qualityComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.qualityComboBox.addItems(self.voice_quality_options)
        self.gridLayout.addWidget(self.qualityComboBox, 5, 1)

        # 添加字幕转换选项
        self.subtitleCheckBox = QCheckBox("生成字幕文件", self.centralwidget)
        self.gridLayout.addWidget(self.subtitleCheckBox, 6, 0, 1, 2)

        # 文本输入
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setPlaceholderText("请输入要转换的文本")
        self.gridLayout.addWidget(self.textEdit, 7, 0, 1, 2)

        # 添加转换按钮
        self.convertButton = QPushButton("转换", self.centralwidget)
        self.gridLayout.addWidget(self.convertButton, 8, 0, 1, 2)

        # 添加音频转换进度条和标签
        self.audio_progress_label = QLabel("语音转换进度:", self.centralwidget)
        self.gridLayout.addWidget(self.audio_progress_label, 9, 0)
        self.audio_progress = QProgressBar(self.centralwidget)
        self.audio_progress.setRange(0, 100)
        self.audio_progress.setValue(0)
        self.gridLayout.addWidget(self.audio_progress, 9, 1)

        # 添加字幕生成进度条和标签
        self.subtitle_progress_label = QLabel("字幕转换进度:", self.centralwidget)
        self.gridLayout.addWidget(self.subtitle_progress_label, 10, 0)
        self.subtitle_progress = QProgressBar(self.centralwidget)
        self.subtitle_progress.setRange(0, 100)
        self.subtitle_progress.setValue(0)
        self.gridLayout.addWidget(self.subtitle_progress, 10, 1)

        MainWindow.setCentralWidget(self.centralwidget)

        # 菜单栏
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        MainWindow.setMenuBar(self.menubar)

        # 添加"视图"菜单
        self.viewMenu = QMenu("视图", self.menubar)
        self.menubar.addMenu(self.viewMenu)

        # 添加颜色选择动作
        for color_option in self.color_options:
            action = QAction(color_option, MainWindow)
            action.triggered.connect(lambda checked, opt=color_option: self.changeColor(opt))
            self.viewMenu.addAction(action)

        # 添加"文字转语音"菜单
        self.ttsMenu = QMenu("文字转语音", self.menubar)
        self.menubar.addMenu(self.ttsMenu)

        # 添加打开新窗口的动作
        self.openTTSAction = QAction("打开文字转语音", MainWindow)
        self.openTTSAction.triggered.connect(self.openTTSDialog)
        self.ttsMenu.addAction(self.openTTSAction)

        # 状态栏
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 连接信号和槽
        self.languageComboBox.currentIndexChanged.connect(self.updateVoices)
        self.convertButton.clicked.connect(self.on_convert_clicked)
        self.speedSlider.valueChanged.connect(self.updateSpeedLabel)
        self.pitchSlider.valueChanged.connect(self.updatePitchLabel)
        self.subtitleCheckBox.stateChanged.connect(self.updateSubtitleState)

        # 初始化语音列表
        loop = asyncio.get_event_loop()
        loop.run_until_complete(self.init_voices())
        self.updateVoices()  # 确保在初始化后更新语音列表

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "语音转文字"))
        MainWindow.setWindowIcon(QIcon('./QT2VISTA/ICON.png'))  # 确保ICON.png在正确的路径

    def updateSpeedLabel(self, value):
        speed = 1 + (value / 100)
        self.speedValueLabel.setText(f"{speed:.2f}")

    def updatePitchLabel(self, value):
        self.pitchValueLabel.setText(f"{value}")

    def updateVoices(self):
        self.voiceComboBox.clear()
        selected_language = self.languageComboBox.currentText()
        if selected_language == "英语":
            filtered_voices = [v for v in self.voices if v['Locale'].startswith("en-")]
        elif selected_language == "简体中文":
            filtered_voices = [v for v in self.voices if v['Locale'].startswith("zh-")]
        elif selected_language == "意大利语":
            filtered_voices = [v for v in self.voices if v['Locale'].startswith("it-")]
        else:
            filtered_voices = []

        for voice in filtered_voices:
            display_name = self.voice_name_mapping.get(voice['ShortName'], voice['ShortName'])
            self.voiceComboBox.addItem(display_name, voice['ShortName'])

    def changeColor(self, color_option):
        palette = QPalette()
        
        if color_option == "浅色":
            base_color = QtGui.QColor(240, 240, 240)
            text_color = QtGui.QColor(0, 0, 0)
        elif color_option == "深色":
            base_color = QtGui.QColor(53, 53, 53)
            text_color = QtGui.QColor(255, 255, 255)
        elif color_option == "自定义":
            color = QColorDialog.getColor()
            if color.isValid():
                base_color = color
                text_color = QtGui.QColor(0, 0, 0) if color.lightness() > 128 else QtGui.QColor(255, 255, 255)
            else:
                return
        elif color_option in ["蓝紫渐变", "日落渐变", "森林渐变", "海洋渐变"]:
            gradient = QLinearGradient(0, 0, 0, self.centralwidget.height())
            if color_option == "蓝紫渐变":
                gradient.setColorAt(0, QtGui.QColor(65, 105, 225))
                gradient.setColorAt(1, QtGui.QColor(138, 43, 226))
            elif color_option == "日落渐变":
                gradient.setColorAt(0, QtGui.QColor(255, 165, 0))
                gradient.setColorAt(1, QtGui.QColor(199, 21, 133))
            elif color_option == "森林渐变":
                gradient.setColorAt(0, QtGui.QColor(34, 139, 34))
                gradient.setColorAt(1, QtGui.QColor(154, 205, 50))
            elif color_option == "海洋渐变":
                gradient.setColorAt(0, QtGui.QColor(0, 191, 255))
                gradient.setColorAt(1, QtGui.QColor(30, 144, 255))
            self.centralwidget.setAutoFillBackground(True)
            palette.setBrush(QPalette.Window, QBrush(gradient))
            text_color = QtGui.QColor(0, 0, 0)
        else:  # 默认
            palette = self.centralwidget.style().standardPalette()
            self.centralwidget.setPalette(palette)
            self.updateWidgetColors(palette)
            return

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'h:\QT2VISTA\WindowDemo.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets 
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QSlider, QFileDialog,QCheckBox
import edge_tts
import asyncio
import os
from qasync import QEventLoop, QApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QLabel, QHBoxLayout
from PyQt5.QtWidgets import QColorDialog
from PyQt5.QtGui import QPalette
from PyQt5.QtWidgets import QAction, QMenu, QDialog
from PyQt5.QtGui import QLinearGradient, QColor, QBrush
import speech_recognition as sr
from pydub import AudioSegment
from pydub.silence import split_on_silence
from PyQt5.QtWidgets import QProgressBar

class TextToSpeechDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("文字转语音")
        self.resize(400, 300)
        layout = QVBoxLayout(self)
        label = QLabel("这是文字转语音的新窗口", self)
        layout.addWidget(label)

class Ui_MainWindow(object):
    def __init__(self):
        self.voices = []
        self.output_folder = ""
        self.voice_name_mapping = {
            "zh-CN-XiaoyiNeural": "小艺",
            "zh-CN-YunxiNeural": "云希",
            "zh-CN-YunjianNeural": "云健",
            "zh-CN-XiaoxiaoNeural": "晓晓",
            # 添加更多中文语音映射
            "en-US-JennyNeural": "Jenny",
            "en-US-GuyNeural": "Guy",
            # 添加更多英文语音映射
            "it-IT-ElsaNeural": "Elsa",
            "it-IT-IsabellaNeural": "Isabella",
            # 添加更多意大利语语音映射
        }
        self.voice_quality_options = ["低质量", "中等质量", "高质量"]
        self.color_options = ["默认", "浅色", "深色", "自定义", "蓝紫渐变", "日落渐变", "森林渐变", "海洋渐变"]
        self.subtitle_enabled = False
        self.audio_progress = None
        self.subtitle_progress = None

    async def init_voices(self):
        self.voices = await edge_tts.list_voices()
        self.updateVoices()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setMinimumSize(QtCore.QSize(800, 600))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setContentsMargins(20, 20, 20, 20)
        self.gridLayout.setSpacing(20)

        # 语言选择
        self.languageLabel = QtWidgets.QLabel(self.centralwidget)
        self.languageLabel.setText("语言:")
        self.gridLayout.addWidget(self.languageLabel, 0, 0)

        self.languageComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.languageComboBox.clear()
        self.languageComboBox.addItems(["英语", "简体中文", "意大利语"])
        self.gridLayout.addWidget(self.languageComboBox, 0, 1)

        # 语音选择
        self.voiceLabel = QtWidgets.QLabel(self.centralwidget)
        self.voiceLabel.setText("语音:")
        self.gridLayout.addWidget(self.voiceLabel, 1, 0)

        self.voiceComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.gridLayout.addWidget(self.voiceComboBox, 1, 1)

        # 感情选择
        self.emotionLabel = QtWidgets.QLabel(self.centralwidget)
        self.emotionLabel.setText("感情:")
        self.gridLayout.addWidget(self.emotionLabel, 2, 0)

        self.emotionComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.emotionComboBox.addItems(["正常", "高兴", "悲伤", "生气"])
        self.gridLayout.addWidget(self.emotionComboBox, 2, 1)

        # 语速调节
        self.speedLabel = QtWidgets.QLabel(self.centralwidget)
        self.speedLabel.setText("语速:")
        self.gridLayout.addWidget(self.speedLabel, 3, 0)

        speedLayout = QHBoxLayout()
        self.speedSlider = QSlider(QtCore.Qt.Horizontal, self.centralwidget)
        self.speedSlider.setRange(-100, 100)
        self.speedSlider.setValue(0)
        self.speedValueLabel = QLabel("1.0", self.centralwidget)
        speedLayout.addWidget(self.speedSlider)
        speedLayout.addWidget(self.speedValueLabel)
        self.gridLayout.addLayout(speedLayout, 3, 1)

        # 语调调节
        self.pitchLabel = QtWidgets.QLabel(self.centralwidget)
        self.pitchLabel.setText("语调:")
        self.gridLayout.addWidget(self.pitchLabel, 4, 0)

        pitchLayout = QHBoxLayout()
        self.pitchSlider = QSlider(QtCore.Qt.Horizontal, self.centralwidget)
        self.pitchSlider.setRange(-100, 100)
        self.pitchSlider.setValue(0)
        self.pitchValueLabel = QLabel("0", self.centralwidget)
        pitchLayout.addWidget(self.pitchSlider)
        pitchLayout.addWidget(self.pitchValueLabel)
        self.gridLayout.addLayout(pitchLayout, 4, 1)

        # 语音质量选择
        self.qualityLabel = QtWidgets.QLabel(self.centralwidget)
        self.qualityLabel.setText("语音质量:")
        self.gridLayout.addWidget(self.qualityLabel, 5, 0)

        self.qualityComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.qualityComboBox.addItems(self.voice_quality_options)
        self.gridLayout.addWidget(self.qualityComboBox, 5, 1)

        # 添加字幕转换选项
        self.subtitleCheckBox = QCheckBox("生成字幕文件", self.centralwidget)
        self.gridLayout.addWidget(self.subtitleCheckBox, 6, 0, 1, 2)

        # 文本输入
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setPlaceholderText("请输入要转换的文本")
        self.gridLayout.addWidget(self.textEdit, 7, 0, 1, 2)

        # 添加转换按钮
        self.convertButton = QPushButton("转换", self.centralwidget)
        self.gridLayout.addWidget(self.convertButton, 8, 0, 1, 2)

        # 添加音频转换进度条和标签
        self.audio_progress_label = QLabel("语音转换进度:", self.centralwidget)
        self.gridLayout.addWidget(self.audio_progress_label, 9, 0)
        self.audio_progress = QProgressBar(self.centralwidget)
        self.audio_progress.setRange(0, 100)
        self.audio_progress.setValue(0)
        self.gridLayout.addWidget(self.audio_progress, 9, 1)

        # 添加字幕生成进度条和标签
        self.subtitle_progress_label = QLabel("字幕转换进度:", self.centralwidget)
        self.gridLayout.addWidget(self.subtitle_progress_label, 10, 0)
        self.subtitle_progress = QProgressBar(self.centralwidget)
        self.subtitle_progress.setRange(0, 100)
        self.subtitle_progress.setValue(0)
        self.gridLayout.addWidget(self.subtitle_progress, 10, 1)

        MainWindow.setCentralWidget(self.centralwidget)

        # 菜单栏
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        MainWindow.setMenuBar(self.menubar)

        # 添加"视图"菜单
        self.viewMenu = QMenu("视图", self.menubar)
        self.menubar.addMenu(self.viewMenu)

        # 添加颜色选择动作
        for color_option in self.color_options:
            action = QAction(color_option, MainWindow)
            action.triggered.connect(lambda checked, opt=color_option: self.changeColor(opt))
            self.viewMenu.addAction(action)

        # 添加"文字转语音"菜单
        self.ttsMenu = QMenu("文字转语音", self.menubar)
        self.menubar.addMenu(self.ttsMenu)

        # 添加打开新窗口的动作
        self.openTTSAction = QAction("打开文字转语音", MainWindow)
        self.openTTSAction.triggered.connect(self.openTTSDialog)
        self.ttsMenu.addAction(self.openTTSAction)

        # 状态栏
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 连接信号和槽
        self.languageComboBox.currentIndexChanged.connect(self.updateVoices)
        self.convertButton.clicked.connect(self.on_convert_clicked)
        self.speedSlider.valueChanged.connect(self.updateSpeedLabel)
        self.pitchSlider.valueChanged.connect(self.updatePitchLabel)
        self.subtitleCheckBox.stateChanged.connect(self.updateSubtitleState)

        # 初始化语音列表
        loop = asyncio.get_event_loop()
        loop.run_until_complete(self.init_voices())
        self.updateVoices()  # 确保在初始化后更新语音列表

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "语音转文字"))
        MainWindow.setWindowIcon(QIcon('./QT2VISTA/ICON.png'))  # 确保ICON.png在正确的路径

    def updateSpeedLabel(self, value):
        speed = 1 + (value / 100)
        self.speedValueLabel.setText(f"{speed:.2f}")

    def updatePitchLabel(self, value):
        self.pitchValueLabel.setText(f"{value}")

    def updateVoices(self):
        self.voiceComboBox.clear()
        selected_language = self.languageComboBox.currentText()
        if selected_language == "英语":
            filtered_voices = [v for v in self.voices if v['Locale'].startswith("en-")]
        elif selected_language == "简体中文":
            filtered_voices = [v for v in self.voices if v['Locale'].startswith("zh-")]
        elif selected_language == "意大利语":
            filtered_voices = [v for v in self.voices if v['Locale'].startswith("it-")]
        else:
            filtered_voices = []

        for voice in filtered_voices:
            display_name = self.voice_name_mapping.get(voice['ShortName'], voice['ShortName'])
            self.voiceComboBox.addItem(display_name, voice['ShortName'])

    def changeColor(self, color_option):
        palette = QPalette()
        
        if color_option == "浅色":
            base_color = QtGui.QColor(240, 240, 240)
            text_color = QtGui.QColor(0, 0, 0)
        elif color_option == "深色":
            base_color = QtGui.QColor(53, 53, 53)
            text_color = QtGui.QColor(255, 255, 255)
        elif color_option == "自定义":
            color = QColorDialog.getColor()
            if color.isValid():
                base_color = color
                text_color = QtGui.QColor(0, 0, 0) if color.lightness() > 128 else QtGui.QColor(255, 255, 255)
            else:
                return
        elif color_option in ["蓝紫渐变", "日落渐变", "森林渐变", "海洋渐变"]:
            gradient = QLinearGradient(0, 0, 0, self.centralwidget.height())
            if color_option == "蓝紫渐变":
                gradient.setColorAt(0, QtGui.QColor(65, 105, 225))
                gradient.setColorAt(1, QtGui.QColor(138, 43, 226))
            elif color_option == "日落渐变":
                gradient.setColorAt(0, QtGui.QColor(255, 165, 0))
                gradient.setColorAt(1, QtGui.QColor(199, 21, 133))
            elif color_option == "森林渐变":
                gradient.setColorAt(0, QtGui.QColor(34, 139, 34))
                gradient.setColorAt(1, QtGui.QColor(154, 205, 50))
            elif color_option == "海洋渐变":
                gradient.setColorAt(0, QtGui.QColor(0, 191, 255))
                gradient.setColorAt(1, QtGui.QColor(30, 144, 255))
            self.centralwidget.setAutoFillBackground(True)
            palette.setBrush(QPalette.Window, QBrush(gradient))
            text_color = QtGui.QColor(0, 0, 0)
        else:  # 默认
            palette = self.centralwidget.style().standardPalette()
            self.centralwidget.setPalette(palette)
            self.updateWidgetColors(palette)
            return

        if color_option not in ["蓝紫渐变", "日落渐变", "森林渐变", "海洋渐变"]:
            palette.setColor(QPalette.Window, base_color)
            palette.setColor(QPalette.WindowText, text_color)
            palette.setColor(QPalette.Base, base_color)
            palette.setColor(QPalette.AlternateBase, base_color.lighter(110))
            palette.setColor(QPalette.ToolTipBase, text_color)
            palette.setColor(QPalette.ToolTipText, base_color)
            palette.setColor(QPalette.Text, text_color)
            palette.setColor(QPalette.Button, base_color)
            palette.setColor(QPalette.ButtonText, text_color)
            palette.setColor(QPalette.BrightText, QtCore.Qt.red)
            palette.setColor(QPalette.Link, QtGui.QColor(42, 130, 218))
            palette.setColor(QPalette.Highlight, QtGui.QColor(42, 130, 218))
            palette.setColor(QPalette.HighlightedText, base_color)

        self.centralwidget.setPalette(palette)
        self.centralwidget.setAutoFillBackground(True)
        self.updateWidgetColors(palette)

        # 更新菜单栏和状态栏的颜色
        self.menubar.setStyleSheet(f"background-color: {palette.color(QPalette.Window).name()}; color: {palette.color(QPalette.WindowText).name()};")
        self.statusbar.setStyleSheet(f"background-color: {palette.color(QPalette.Window).name()}; color: {palette.color(QPalette.WindowText).name()};")

    def updateWidgetColors(self, palette):
        for widget in self.centralwidget.findChildren(QtWidgets.QWidget):
            widget.setPalette(palette)
            if isinstance(widget, (QtWidgets.QComboBox, QtWidgets.QTextEdit, QtWidgets.QLineEdit)):
                widget.setStyleSheet(f"""
                    background-color: {palette.color(QPalette.Base).name()};
                    color: {palette.color(QPalette.Text).name()};
                """)
            elif isinstance(widget, QtWidgets.QPushButton):
                widget.setStyleSheet(f"""
                    background-color: {palette.color(QPalette.Button).name()};
                    color: {palette.color(QPalette.ButtonText).name()};
                """)

    def openTTSDialog(self):
        dialog = TextToSpeechDialog(self.centralwidget)
        dialog.exec_()

    def updateSubtitleState(self, state):
        self.subtitle_enabled = state == QtCore.Qt.Checked

    async def convertText(self):
        text = self.textEdit.toPlainText()
        voice_short_name = self.voiceComboBox.currentData()
        
        if voice_short_name is None:
            self.statusbar.showMessage("选择的语音无效")
            return
        
        speed = self.speedSlider.value()
        pitch = self.pitchSlider.value()
        emotion = self.emotionComboBox.currentText()
        quality = self.qualityComboBox.currentText()
        
        try:
            # 调整rate参数的格式
            rate = f"{speed:+d}%"
            
            # 准备文件名，包含质量后缀
            quality_suffix = "-64k" if quality == "低质量" else "-128k" if quality == "中等质量" else "-192k"
            default_filename = f"output{quality_suffix}.mp3"
            
            # 让用户选择文件名
            file_name, _ = QFileDialog.getSaveFileName(None, "保存音频文件", default_filename, "MP3 文件 (*.mp3)")
            if not file_name:
                self.statusbar.showMessage("未选择保存文件名")
                return
            
            # 如果用户没有输入后缀，添加后缀
            if not file_name.lower().endswith('.mp3'):
                file_name += '.mp3'
            
            # 创建Communicate对象，使用voice的ShortName
            communicate = edge_tts.Communicate(text=text, voice=voice_short_name, rate=rate)
            
            # 保存音频文件，不使用进度回调
            self.audio_progress.setValue(0)
            await communicate.save(file_name)
            self.audio_progress.setValue(100)  # 设置进度为100%
            
            self.statusbar.showMessage(f"转换完成，文件保存在: {file_name}")

            # 如果启用了字幕生成，调用speech_to_subtitle方法
            if self.subtitle_enabled:
                await self.speech_to_subtitle(file_name)
                self.statusbar.showMessage(f"转换完成，音频文件和字幕文件保存在: {file_name}")
        except Exception as e:
            self.statusbar.showMessage(f"转换失败: {str(e)}")

    async def speech_to_subtitle(self, audio_file):
        try:
            # 加载音频文件
            sound = AudioSegment.from_mp3(audio_file)
            
            # 将音频分割成块
            chunks = split_on_silence(sound, min_silence_len=500, silence_thresh=sound.dBFS-14)
            
            # 初始化识别器
            r = sr.Recognizer()
            
            # 准备字幕文件
            subtitle_file = audio_file.rsplit('.', 1)[0] + '.srt'
            
            self.subtitle_progress.setValue(0)
            total_chunks = len(chunks)
            
            with open(subtitle_file, 'w', encoding='utf-8') as f:
                for i, audio_chunk in enumerate(chunks, start=1):
                    # 导出音频块
                    chunk_filename = f"chunk{i}.wav"
                    audio_chunk.export(chunk_filename, format="wav")
                    
                    # 识别音频
                    with sr.AudioFile(chunk_filename) as source:
                        audio = r.record(source)
                    try:
                        text = r.recognize_google(audio, language='zh-CN')  # 这里使用中文识别，可以根据需要更改
                    except sr.UnknownValueError:
                        text = "无法识别音频"
                    
                    # 写入字幕文件
                    start_time = sum(len(c) for c in chunks[:i-1]) / 1000.0
                    end_time = start_time + len(audio_chunk) / 1000.0
                    f.write(f"{i}\n")
                    f.write(f"{self.format_time(start_time)} --> {self.format_time(end_time)}\n")
                    f.write(f"{text}\n\n")
                    
                    # 更新字幕生成进度
                    progress = int(i / total_chunks * 100)
                    self.subtitle_progress.setValue(progress)
                    await asyncio.sleep(0)  # 允许GUI更新
                    
                    # 删除临时音频块文件
                    os.remove(chunk_filename)

            self.statusbar.showMessage(f"字幕文件已生成: {subtitle_file}")
        except Exception as e:
            self.statusbar.showMessage(f"生成字幕失败: {str(e)}")

    def format_time(self, seconds):
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        seconds = int(seconds % 60)
        milliseconds = int((seconds - int(seconds)) * 1000)
        return f"{hours:02d}:{minutes:02d}:{seconds:02d},{milliseconds:03d}"

    def on_convert_clicked(self):
        asyncio.create_task(self.convertText())

if __name__ == "__main__":
    import sys
    import asyncio
    from qasync import QEventLoop, QApplication

    app = QApplication(sys.argv)
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)

    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    with loop:
        loop.run_forever()
